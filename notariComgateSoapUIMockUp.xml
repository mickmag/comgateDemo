<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="c90227c7-7d83-489c-86d2-d93aae1814ad" activeEnvironment="Default" name="REST Project 1" soapui-version="5.1.2" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="6dfa3441-9cae-4ec6-9164-96917acf5457" wadlVersion="http://wadl.dev.java.net/2009/02" name="" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://staw10bokr:8089/</con:endpoint></con:endpoints><con:resource name="Create" path="/v1.0/create" id="907a594f-fa80-485b-a817-4b61c09d3db0"><con:settings/><con:parameters><con:parameter><con:name>merchant</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>price</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Create" id="425cf7c3-88b0-461c-8cd1-afafb8c2d522" method="POST"><con:settings/><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/json</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>multipart/form-data</con:mediaType><con:status>200</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:request name="Request 1" id="2dc07fbd-e27d-4303-8ebd-7e400da65edc" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://staw10bokr:8089/</con:endpoint><con:request/><con:originalUri>http://staw10bokr/v1.0/create</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="price" value="84545"/>
  <con:entry key="merchant" value="merchant"/>
</con:parameters><con:parameterOrder><con:entry>merchant</con:entry><con:entry>price</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="70767584-4d2b-437e-a95f-a0ac25fd39f3" port="8089" path="/" host="staw10bokr" name="REST MockService 1"><con:settings/><con:properties/><con:restMockAction name="/v1.0/create" method="POST" resourcePath="/v1.0/create" id="f0df64c3-5ab2-4509-ace5-54a4cb50d684"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="2271fc55-596d-49a3-99f6-001ae7434a87" httpResponseStatus="200" mediaType="multipart/form-data"><con:settings/><con:responseContent>code=0&amp;message=OK&amp;transId=AB12-EF34-IJ56&amp;redirect=https%3A%2F%2Fpayments.comgate.cz%2Fclient%2Finstructions%2F%3Fid%3DABCDEFGHIJ</con:responseContent></con:response><con:response name="Response 2" id="aab55eca-72d0-4291-9488-ee65b743bfdc" httpResponseStatus="200" mediaType="multipart/form-data"><con:settings/><con:responseContent>asdasd</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/></con:soapui-project>